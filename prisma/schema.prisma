generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String  @id @default(cuid())
  profile_name        String
  username            String  @unique
  profile_picture_url String?
  bio                 String?
  gender              String?
  dark_mode           Boolean @default(true)

  email           String? @unique
  phone_number    String? @unique
  hashed_password String  @unique

  hide_like_count    Boolean @default(false)
  is_private_account Boolean @default(false)

  who_can_comment PeopleType @default(EVERYONE)
  who_can_tag     PeopleType @default(EVERYONE)

  post                Post[]               @relation("creator")
  story               Story[]
  sound               Sound[]
  reel                Reel[]
  message             Message[]
  media               Media[]
  agent               Relationship[]       @relation("agent")
  target              Relationship[]       @relation("target")
  comment             Comment[]
  post_tag            PostTag[]
  post_interaction    PostInteraction[]
  story_interaction   StoryInteraction[]
  reel_interaction    ReelInteraction[]
  conversation_member ConversationMember[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([phone_number])
  @@index([email])
  @@index([username, hashed_password])
}

model PostInteraction {
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  post_id String
  post    Post   @relation(fields: [post_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  is_liked      Boolean @default(false)
  is_bookmarked Boolean @default(false)
  is_shared     Boolean @default(false)

  @@id([user_id, post_id])
  @@index([user_id, post_id])
  @@index([post_id, user_id])
}

model StoryInteraction {
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  story_id String
  story    Story  @relation(fields: [story_id], references: [id])

  is_liked  Boolean @default(false)
  is_shared Boolean @default(false)
  is_hidden Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([user_id, story_id])
  @@index([user_id, story_id])
  @@index([story_id, user_id])
}

model ReelInteraction {
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  reel_id String
  reel    Reel   @relation(fields: [reel_id], references: [id])

  is_liked      Boolean @default(false)
  is_bookmarked Boolean @default(false)
  is_shared     Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([user_id, reel_id])
  @@index([user_id, reel_id])
  @@index([reel_id, user_id])
}

model Post {
  id          String  @id @default(uuid())
  description String?

  location_id String?
  location    Location? @relation(fields: [location_id], references: [id])

  creator_id String
  creator    User   @relation(fields: [creator_id], references: [id], onDelete: Restrict, name: "creator")

  hide_stats       Boolean @default(false)
  disable_comments Boolean @default(false)

  tagged_people    PostTag[]
  post_interaction PostInteraction[]

  media   Media[]
  comment Comment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([location_id])
  @@index([creator_id])
}

model Story {
  id         String    @id @default(uuid())
  media_type MediaType
  src        String    @unique

  creator_id String
  creator    User   @relation(fields: [creator_id], references: [id])

  is_for_close_friends Boolean @default(false)

  story_interaction StoryInteraction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([creator_id])
}

model Reel {
  id          String  @id @default(uuid())
  src         String  @unique
  description String?

  thumbnail_src String @unique

  sound_id String?
  sound    Sound?  @relation(fields: [sound_id], references: [id])

  creator_id String
  creator    User   @relation(fields: [creator_id], references: [id])

  reel_interaction ReelInteraction[]
  comment          Comment[]

  is_displayed_in_feed Boolean @default(true)
  is_displayed_in_grid Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([sound_id])
  @@index([creator_id])
}

model Sound {
  id            String @id @default(uuid())
  src           String @unique
  thumbnail_src String @unique

  creator_id String
  creator    User   @relation(fields: [creator_id], references: [id])

  reel Reel[]

  @@index([creator_id])
}

model Location {
  id            String  @id @default(uuid())
  street        String?
  zip_code      Int?
  city          String?
  state         String?
  country       String
  business_name String?

  post Post[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([city])
  @@index([state])
  @@index([business_name])
}

model PostTag {
  post_id String
  post    Post   @relation(fields: [post_id], references: [id])

  tagged_person_id String
  tagged_person    User     @relation(fields: [tagged_person_id], references: [id])
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@id([post_id, tagged_person_id])
  @@index([post_id])
  @@index([tagged_person_id])
}

model Comment {
  id      String @id @default(uuid())
  text    String
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  content_type ContentType

  post_id String?
  post    Post?   @relation(fields: [post_id], references: [id])

  reel_id String?
  reel    Reel?   @relation(fields: [reel_id], references: [id])

  comment_id String?
  comment    Comment?  @relation(fields: [comment_id], references: [id], name: "reply", onDelete: Restrict, onUpdate: Restrict)
  replies    Comment[] @relation("reply")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([comment_id])
  @@index([user_id])
  @@index([post_id, user_id])
  @@index([reel_id, user_id])
}

enum ContentType {
  POST
  REEL
}

model Media {
  id       String    @id @default(uuid())
  type     MediaType
  src      String    @unique
  alt_text String?

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Restrict)

  post_id String
  post    Post   @relation(fields: [post_id], references: [id], onDelete: Restrict)

  position Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([post_id, position])
}

enum MediaType {
  IMAGE
  VIDEO
}

model Relationship {
  agent_id String
  agent    User   @relation(fields: [agent_id], references: [id], name: "agent")

  target_id String
  target    User   @relation(fields: [target_id], references: [id], name: "target")

  relationship       RelationshipType
  has_muted_stories  Boolean          @default(false)
  has_muted_posts    Boolean          @default(false)
  has_muted_messages Boolean          @default(false)
  is_close_friends   Boolean          @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([target_id, agent_id])
  @@index([agent_id, target_id])
  @@index([target_id, agent_id])
}

enum RelationshipType {
  FOLLOWS
  BLOCKS
}

enum PeopleType {
  EVERYONE
  PEOPLE_YOU_FOLLOW
  NO_ONE
}

model Message {
  id      String @id @default(uuid())
  text    String
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  conversation_id String
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  message_content_id String?
  message_content    MessageContent[]

  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id, created_at, conversation_id])
  @@index([user_id, conversation_id, created_at])
  @@index([conversation_id, created_at, user_id])
  @@index([conversation_id, user_id, created_at])
}

model MessageContent {
  message_id String
  message    Message @relation(fields: [message_id], references: [id], onDelete: Cascade)

  content_id String
  content    Content @relation(fields: [content_id], references: [src], onDelete: Cascade)

  @@id([message_id, content_id])
  @@index([message_id])
  @@index([content_id])
}

// things you can message people: posts, stories, reels, uploaded picture or video, profiles

model Content {
  src          String             @id
  content_type MessageContentType

  message_content MessageContent[]
}

enum MessageContentType {
  POST
  STORY
  REEL
  UPLOADED_IMAGE
  UPLOADED_VIDEO
  PROFILE
}

model Conversation {
  id String @id @default(uuid())

  message             Message[]
  conversation_member ConversationMember[]

  is_group_conversation Boolean @default(false)
  conversation_owner_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ConversationMember {
  conversation_id String
  conversation    Conversation @relation(fields: [conversation_id], references: [id])

  member_id String
  member    User   @relation(fields: [member_id], references: [id])

  @@id([conversation_id, member_id])
  @@index([conversation_id])
  @@index([member_id])
}
